{"version":3,"sources":["components/Card.js","components/CardListView.js","components/BoardSection.js","App.js","serviceWorker.js","index.js"],"names":["Card","onEditCartAction","console","log","_this","props","saveCallBack","cardDetails","id","text","onDeleteCartAction","event","target","value","this","react_default","a","createElement","className","isNew","length","onDoubleClick","title","onClick","autoFocus","style","minHeight","onBlur","saveItem","bind","defaultValue","Component","CardListView","onSave","newText","isEdit","editCard","cardSection","section","cartId","cardList","addCard","_this2","onAddCartAction","disabled","findIndex","card","map","components_Card","key","App","state","sections","setState","prevState","concat","item","filter","setTimeout","filterCardsBySection","components_CardListView","class","BoardSection","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.027ab9fc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass Card extends Component {\n\n    onEditCartAction = () => {\n        console.log('Card -- onEditCartAction');\n        this.props.saveCallBack(this.props.cardDetails.id, this.props.cardDetails.text, true);\n    }\n\n    onDeleteCartAction = () => {\n        console.log('Card -- onDeleteCartAction');\n        this.props.saveCallBack(this.props.cardDetails.id, '');\n    }\n\n    saveItem(event) {\n        console.log('Card -- saveItem', event.target.value);\n        this.props.saveCallBack(this.props.cardDetails.id, event.target.value);\n    }\n\n    render(props) {\n        return (\n            <div className=\"col-sm-4\">\n                <div className=\"card app-card\">\n                { this.props.cardDetails.isNew !== true && (this.props.cardDetails.text.length > 0)  ?\n                    // View card\n                    <div className=\"card-text\">\n                        <span onDoubleClick={this.onEditCartAction}>{this.props.cardDetails.text}</span>\n                        <button className=\"btn card-delete-button\" title=\"Delete Card\" onClick={this.onDeleteCartAction}>\n                            <i className=\"fa fa-1 fa-close\"></i>\n                        </button>\n                    </div>\n                    :\n                    // Add/Edit card\n                    <textarea autoFocus className=\"input-text\" style={{minHeight: 85}} onBlur={this.saveItem.bind(this)}\n                        defaultValue={this.props.cardDetails.text}>\n                    </textarea>\n                }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport Card from './Card';\n\nclass CardListView extends Component {\n\n  onAddCartAction(id) {\n    // New card add\n    let cartId = this.props.cardList.length > 0 ? this.props.cardList[this.props.cardList.length - 1].id + 1 : 1;\n    this.props.addCard({id:cartId, text:'', cardSection:id, isNew: true});\n  }\n\n  onSave = (id, newText, isEdit) => {\n    if(isEdit) {\n      // Edit newly added card\n      this.props.editCard({id:id, text:newText, cardSection:this.props.section.id, isNew : isEdit});\n    } else {\n      // Edit or delete existing card\n      this.props.editCard({id:id, text:newText, cardSection:this.props.section.id});\n    }\n  }\n\n  render(props) {\n    return (\n        <div className=\"col-sm-6 card-section\">\n            <div className=\"text-center\"> \n              <label className=\"cart-name\"> {this.props.section.title} </label>\n              <button className=\"btn btn-primary btn-sm circle-fa-button \" title=\"Add Card\"\n                onClick={() => this.onAddCartAction(this.props.section.id)}\n                disabled={(this.props.cardList.findIndex(card => card.text.length === 0) > -1)? true : false}>\n                <i className=\"fa fa-plus\"></i>\n              </button>\n            </div>\n\n            <div className=\"row\">\n                {this.props.cardList.map(value =>   \n                    <Card key={value.id + value.cardSection} cardDetails={value} saveCallBack={this.onSave}></Card>\n                )}\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default CardListView;\n\n\n","import React, { Component } from 'react';\nimport CardListView from './CardListView';\nclass App extends Component {\n  state = {\n    cardList: [\n      {id: 1, text:'Good Stories', cardSection:'WWW'},\n      {id: 2, text:'Good Stories', cardSection:'WWW'},\n      {id: 3, text:'Bad Stories', cardSection:'AI'}\n    ],\n    sections : [\n      {id: 'WWW', title: 'What went well'},\n      {id: 'WCI', title: 'What can be improved'},\n      {id: 'SD', title: 'Start doing'},\n      {id: 'AI', title: 'Action items'}\n    ]\n  };\n\n  addCard = (card) => {\n    console.log('BoardSection - addCard');\n    // this.state.cardList.push(card);\n    // this.setState(() => ({cardList: this.state.cardList}));\n    this.setState(prevState => ({ cardList: prevState.cardList.concat(card)}));\n  }\n  editCard = (card) => {\n    console.log('BoardSection -- editCard');\n    if(card.text.length > 0) {\n      // Edit card\n      this.setState(prevState => ({ cardList: prevState.cardList.map(item =>\n        item.id === card.id && item.cardSection === card.cardSection ? card : item )}\n      ));\n    } else {\n      // Remove/ Delete card\n      this.setState(prevState => ({ cardList: prevState.cardList.filter(item =>\n        item.cardSection === card.cardSection ? (item.id !== card.id) : true)}\n      ));\n    }\n    setTimeout(() => console.log(this.state.cardList));\n  }\n\n  filterCardsBySection = (section) => {\n    return this.state.cardList.filter(value => section === value.cardSection);\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n          <div className=\"row\">\n            { this.state.sections.map(value =>\n              <CardListView key={value.id} section={value} cardList={this.filterCardsBySection(value.id)} \n                addCard={this.addCard} editCard={this.editCard}></CardListView>\n            )}\n           </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport BoardSection from  './components/BoardSection';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h2 className=\"header\"> Retro Board</h2>\n        <div class> Double click on card text to edit card</div>\n        <BoardSection></BoardSection>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}